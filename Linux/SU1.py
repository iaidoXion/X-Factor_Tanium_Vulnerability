# -*- coding: utf-8 -*-
import os
import re
result_list = []

# su1-01
dt = {}
result = 0
dt['SUV'] = 'SU1-01'

cmd = os.popen("cat etc/securetty").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 securetty 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if x.startswith('pts/'):
        dt['value'] = ('securetty파일에 {}설정이 존재 합니다.'.format(x))
        dt['status'] = 'Weak'
        result += 1
        break
    cm = os.popen("cat /etc/pam.d/login").read().splitlines()
    for x in cm:
        if "auth" in x:
            if "required" in x:
                if "/lib/security/pam_securetty.so" in x:
                    if x.startswith('#'):
                        result = 200
                        break
                    else:
                        dt['value'] = (x)
                        dt['status'] = 'Good'
                        result += 1
                        break
if result == 0:
    dt['value'] = 'login 파일의 auth required /lib/security/pam_securetty.so 설정이 존재하지 않습니다.'
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-02
dt = {}
result = 0
dt['SUV'] = 'SU1-02'
minlen = 0
lcredit = 0
dcredit = 0
ocredit = 0

cmd = os.popen("cat etc/pam.d/system-auth").read().splitlines()
if cmd == []:
    dt['value'] = '/etc/pam.d/에 system-auth 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if "password" in x:
        if "requisite" in x:
            if "/lib/security/$ISA/pam_cracklib.so" in x:
                if x.startswith('#'):
                    result = 200
                    break
                else:
                    y = x.split(' ')
                    for count in y:
                        if "minlen" in count:
                            numbers = re.findall(r'\d+', count)
                            intnumbers = list(map(int, numbers))
                            if intnumbers[0] >= 8:
                                minlen = 1
                                result += 1
                            else:
                                dt['value'] = "패스워드 최소길이가 8 미만입니다."
                                dt['status'] = 'Weak'
                                result += 1
                                break
                        if "lcredit" in count:
                            numbers = re.findall(r'\d+', count)
                            intnumbers = list(map(int, numbers))
                            if "-" in count:
                                if intnumbers[0] == 1:
                                    lcredit = 1
                                    result += 1
                                else:
                                    dt['value'] = "영문 필수"
                                    dt['status'] = 'Weak'
                                    result += 1
                                    break
                        if "dcredit" in count:
                            numbers = re.findall(r'\d+', count)
                            intnumbers = list(map(int, numbers))
                            if "-" in count:
                                if intnumbers[0] == 1:
                                    dcredit = 1
                                    result += 1
                                else:
                                    dt['value'] = "숫자 필수"
                                    dt['status'] = 'Weak'
                                    result += 1
                                    break
                        if "ocredit" in count:
                            numbers = re.findall(r'\d+', count)
                            intnumbers = list(map(int, numbers))
                            if "-" in count:
                                if intnumbers[0] == 1:
                                    ocredit = 1
                                    result += 1
                                else:
                                    dt['value'] = "특수문자"
                                    dt['status'] = 'Weak'
                                    result += 1
                                    break
                        if minlen == 1 and lcredit == 1 and dcredit == 1 and ocredit == 1:
                            dt['value'] = (x)
                            dt['status'] = 'Good'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'

if result == 0:
    dt['value'] = "system-auth 파일에 password requisite /lib/security/$ISA/pam_cracklib.so 설정이 존재하지 않습니다."
    dt['status'] = 'Weak'


result_list.append(dt)
# su1-03
dt = {}
result = 0
dt['SUV'] = 'SU1-03'

cmd = os.popen("cat /etc/pam.d/system-auth").read().splitlines()
if cmd == []:
    dt['value'] = '/etc/pam.d에 system-auth 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if "auth" in x:
        if "required" in x:
            if "/lib/security/pam_tally.so deny" in x:
                numbers = re.findall(r'\d+', x)
                intnumbers = list(map(int, numbers))
                if intnumbers[0] <= 5:
                    cm = os.popen(
                        "cat /etc/pam.d/system-auth").read().splitlines()
                    for x in cm:
                        if "account" in x:
                            if "required" in x:
                                if "/lib/security/pam_tally.so no_magic_root reset" in x:
                                    if x.startswith('#'):
                                        result = 200
                                        break
                                    else:
                                        dt['value'] = (x)
                                        dt['status'] = 'Good'
                                        result += 1
                                        break
                                else:
                                    dt['value'] = "system-auth 파일에 account required /lib/security/pam_tally.so no_magic_root reset 설정이 존재하지 않습니다."
                                    dt['status'] = 'Weak'
                                    result += 1

                else:
                    dt['value'] = "system-auth 파일에  auth required /lib/security/pam_tally.so deny의 값이 5 이하의 값으로 설정되어 있지 않습니다."
                    dt['status'] = 'Weak'
                    result += 1
                    break
if result == 0:
    dt['value'] = "system-auth 파일에  auth required /lib/security/pam_tally.so 설정이 존재하지 않습니다."
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-04
dt = {}
result = 0
dt['SUV'] = 'SU1-04'

cmd = os.popen("cat /etc/passwd").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 passwd 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
cm = os.popen('cat /etc/shadow').read().splitlines()
if cm == []:
    for x in cmd:
        acount = "".join(x).split(':')
        if acount[1] == 'x':
            if x.startswith('#'):
                result = 200
                break
            else:
                dt['value'] = '패스워드에 암호화가 정상적으로 설정되어있습니다.'
                dt['status'] = 'Good'
                result += 1
        else:
            if x.startswith('#'):
                result = 200
            else:
                dt['value'] = '쉐도우 패스워드를 사용하고있습니다.'
                dt['status'] = 'Good'
                result += 1

if result == 0:
    dt['value'] = '/etc에 shadow 파일이 존재하지 않습니다.'
    dt['status'] = 'Weak'
    result = 100

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-05
dt = {}
result = 0
dt['SUV'] = 'SU1-05'

cmd = os.popen("cat /etc/passwd").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 passwd 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    y = x.split(":")
    if y[2] == '0':
        if y[0] == "root":
            pass
        else:
            dt['value'] = ('{} 계정의 UID가 0번 입니다.'.format(y[0]))
            dt['status'] = 'Weak'
            break
    if x.startswith('#'):
        result = 200
        break
    else:
        dt['value'] = 'root 계정만 UID 0번을 사용하고 있습니다.'
        dt['status'] = 'Good'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-06
dt = {}
result = 0
dt['SUV'] = 'SU1-06'

cmd = os.popen("cat /etc/group").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 group 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if 'wheel' in x:
        acount = "".join(x).split(':')
        if acount[3] == "":
            dt['value'] = 'wheel 그룹에 구성원이 존재하지 않습니다.'
            dt['status'] = 'Weak'
            result += 1
            break
        else:
            cm = os.popen("cat /etc/pam.d/su").read().splitlines()
            if cmd == []:
                dt['value'] = '/etc/pam.d 에 su 파일이 존재하지 않습니다.'
                dt['status'] = 'Error'
                result = 100
                break
            for x in cm:
                if "auth" in x:
                    if "required" in x:
                        if "/lib/security/pam_wheel.so debug group=wheel" in x or "/lib/security/$ISA/pam_wheel.so use_uid" in x:
                            if x.startswith('#'):
                                dt['value'] = '주석처리가 되어있습니다.'
                                dt['status'] = 'Weak'
                                result += 1
                                break
                            else:
                                dt['value'] = '특정 그룹만 su명령어를 사용할 수 있개 변경하였습니다.'
                                dt['status'] = 'Good'
                                result += 1
                                break

if result == 0:
    dt['value'] = 'wheel 그룹이 없습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-07
dt = {}
result = 0
dt['SUV'] = 'SU1-07'
cmd = os.popen("cat /etc/login.defs").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 login.defs 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if "PASS_MIN_LEN" in x:
        numbers = re.findall(r'\d+', x)
        intnumbers = list(map(int, numbers))
        if x.startswith('#'):
            result = 200
            pass
        elif intnumbers == []:
            dt['value'] = 'PASS_MIN_LEN에 값이 존재하지 않습니다.'
            dt['status'] = 'Weak'
            result += 1
        elif intnumbers[0] >= 8:
            dt['value'] = (x)
            dt['status'] = 'Good'
            result += 1
            break
        else:
            dt['value'] = '패스워드의 최소길이가 8 미만으로 설정되어 있습니다.'
            dt['status'] = 'Weak'
            result += 1
            break
if result == 0:
    dt['value'] = "login.defs 파일에 PASS_MIN_LEN 설정이 존재하지 않습니다."
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-08
dt = {}
result = 0
dt['SUV'] = 'SU1-08'

cmd = os.popen("cat /etc/login.defs").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 login.defs 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if "PASS_MAX_DAYS" in x:
        numbers = re.findall(r'\d+', x)
        intnumbers = list(map(int, numbers))
        if x.startswith('#'):
            result = 200
            pass
        elif intnumbers == []:
            dt['value'] = 'PASS_MAX_DAYS에 값이 존재하지 않습니다.'
            dt['status'] = 'Weak'
            result += 1
        elif intnumbers[0] <= 90:
            dt['value'] = (x)
            dt['status'] = 'Good'
            result += 1
            break
        else:
            dt['value'] = '패스워드 최대 사용기간이 {}일 로 설정되어 있습니다.'.format(
                intnumbers[0])
            dt['status'] = 'Weak'
            result += 1
            break
if result == 0:
    dt['value'] = "login.defs 파일에 PASS_MAX_DAYS 설정이 존재하지 않습니다."
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-09
dt = {}
result = 0
dt['SUV'] = 'SU1-09'

cmd = os.popen("cat /etc/login.defs").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 login.defs 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    if 'PASS_MIN_DAYS' in x:
        numbers = re.findall(r'\d+', x)
        intnumbers = list(map(int, numbers))
        if x.startswith('#'):
            result = 200
            pass
        elif intnumbers == []:
            dt['value'] = 'PASS_MIN_DAYS에 값이 존재하지 않습니다.'
            dt['status'] = 'Weak'
            result += 1
            break
        elif intnumbers[0] >= 1:
            dt['value'] = (x)
            dt['status'] = 'Good'
            result += 1
            break
        else:
            dt['value'] = 'PASS_MIN_DAYS의 기한이 1 이하입니다.'
            dt['status'] = 'Weak'
            result += 1
            break
if result == 0:
    dt['value'] = "login.defs 파일에 PASS_MIN_DAYS 설정이 존재하지 않습니다."
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)


# su1-10
dt = {}
result = 0
dt['SUV'] = 'SU1-10'

cmd1 = os.popen("cat /etc/passwd").read().splitlines()
cmd2 = os.popen("lastlog -b 90").read().splitlines()

if cmd1 == []:
    dt['value'] = '/etc에 passwd 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd1:
    if "lp" in x or "uucp" in x or "nuucp" in x:
        dt['value'] = '불필요한  Default 계정이 존재합니다. '
        dt['status'] = 'Weak'
        result += 1
        break
    elif cmd2 == []:
        dt['value'] = '불필요한 계정이 없습니다. '
        dt['status'] = 'Good'
    else:
        dt['value'] = ('불필요한 계정이 존재합니다.')
        dt['status'] = 'Weak'

    # su1-11
dt = {}
result = 0
dt['SUV'] = 'SU1-11'

cmd = os.popen("cat /etc/group").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 group 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    acount = "".join(x).split(':')
    if acount[0] == "root" and "root" in acount[3]:
        acount = acount[3].split(',')
        if len(acount) <= 1:
            if x.startswith('#'):
                result = 200
                break
            else:
                dt['value'] = (x)
                dt['status'] = 'Good'
            break
        else:
            dt['value'] = ('관리자 그룹에 불필요한 계정이 {}개 있습니다.').format(
                len(acount)-1)
            dt['status'] = 'Weak'
            break
    else:
        dt['value'] = 'root 계정이 존재하지 않습니다.'
        dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

# su1-12
dt = {}
result = 0
dt['SUV'] = 'SU1-12'

cmd = os.popen("cat /etc/passwd").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 passwd 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    print(1)
# su1-13
dt = {}
result = 0
uid = []
dt['SUV'] = 'SU1-13'

cmd = os.popen("cat /etc/passwd").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 passwd 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    y = x.split(":")
    if (len(uid) != 0):
        uidx = ",".join(uid).find(y[2])
        if uidx >= 0:
            uidy = cmd[uidx].split(":")
            dt['value'] = '{} 계정과 {} 계정의 UID가 동일합니다.'.format(y[0], uidy[0])
            dt['status'] = 'Weak'
            uid.append(y[2])
            break
    uid.append(y[2])
    if len(cmd) == len(uid):
        if x.startswith('#'):
            result = 200
            break
        else:
            dt['value'] = '모든 UID가 겹치지 않게 설정되었습니다.'
            dt['status'] = 'Good'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)


# su1-15
dt = {}
result = 0
code = 0
dt['SUV'] = 'SU1-15'

cmd = os.popen('echo $0').read()
cmd1 = os.popen("cat /etc/profile").read().splitlines()
cmd2 = os.popen("cat /etc/csh.login").read().splitlines()
cmd3 = os.popen("cat /etc/csh.cshrc").read().splitlines()

if 'sh' in cmd or 'ksh' in cmd or 'bash' in cmd:
    code = 1
elif 'csh' in cmd:
    code = 2


if cmd1 != [] and code == 1:
    for x in cmd1:
        if 'TMOUT' in x:
            numbers = re.findall(r'\d+', x)
            intnumbers = list(map(int, numbers))
            if intnumbers == []:
                result = 100
                break
            intnumber = intnumbers.pop(0)
            if intnumber <= 600:
                if x.startswith('#'):
                    result = 200
                    break
                else:
                    result += 2
                    break
            elif intnumbers == 0:
                pass
            else:
                dt['value'] = (
                    'Session timeout이 {}분으로 설정되어 있습니다.').format(int(intnumber/60))
                dt['status'] = 'Weak'
                result += 1
                break
elif cmd2 != [] and code == 2:
    for x in cmd2:
        if 'set autologout' in x:
            numbers = re.findall(r'\d+', x)
            intnumbers = list(map(int, numbers))
            if intnumbers == []:
                result = 100
                break
            intnumber = intnumbers.pop()
            if intnumber <= 10:
                if x.startswith('#'):
                    result = 200
                    break
                else:
                    result += 2
                    break
                dt['value'] = (
                    'Session timeout이 {}분으로 설정되어 있습니다.').format(intnumber)
                dt['status'] = 'Weak'
                result += 1
                break
elif cmd3 != [] and code == 2:
    code = 3
    for x in cmd3:
        if 'set autologout' in x:
            numbers = re.findall(r'\d+', x)
            intnumbers = list(map(int, numbers))
            if intnumbers == []:
                result = 100
                break
            intnumber = intnumbers.pop()
            if intnumbers <= 10:
                if x.startswith('#'):
                    result = 200
                    break
                else:
                    result += 2
                    break
            else:
                dt['value'] = (
                    'Session timeout이 {}분으로 설정되어 있습니다.').format(intnumber)
                dt['status'] = 'Weak'
                result += 1
                break
else:
    if code == 1:
        dt['value'] = '/etc에 profile 파일이 존재하지 않습니다.'
        dt['status'] = 'Weak'
    elif code == 2:
        dt['value'] = '/etc에 csh.login 파일이 존재하지 않습니다.'
        dt['status'] = 'Weak'
    elif code == 3:
        dt['value'] = '/etc에 csh.cshrc 파일이 존재하지 않습니다.'
        dt['status'] = 'Weak'

if result == 0:
    dt['value'] = 'Session timeout 설정이 존재하지 않습니다.'
    dt['status'] = 'Weak'

if result == 2:
    dt['value'] = 'Session timeout이 정상적으로 설정되었습니다.'
    dt['status'] = 'Good'

if result == 100:
    dt['value'] = 'export TMOUT만 설정했습니다.'
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'

result_list.append(dt)


# su1-17
dt = {}
result = 0
code = 0
dt['SUV'] = 'SU1-17'
cmd = os.popen("cat /etc/redhat-release").read().splitlines()
cmd1 = os.popen(
    "cat /etc/pam.d/common-password").read().splitlines()  # SUSE Linux
cmd2 = os.popen(
    "cat /etc/pam.d/system-password").read().splitlines()  # Photon OS
cmd3 = os.popen("cat /etc/pam.d/system-auth").read().splitlines()  # Cent OS


for x in cmd:
    if 'SUSE' in x:
        code = 1
    elif 'Photon' in x:
        code = 2
    elif 'CentOS' in x:
        code = 3

if cmd1 != [] and code == 1:
    for x in cmd1:
        if "password" in x:
            if "required" in x:
                if "remember" in x:
                    re = x.find('remember')
                    numbers = re.findall(r'\d+', )
                    intnumbers = list(map(int, numbers))
                    intnumber = intnumbers.pop()
                    if intnumber >= 5:
                        if x.startswith('#'):
                            result = 200
                            break
                        else:
                            result += 2
                            dt['value'] = (x)
                            dt['status'] = 'Good'
                            result += 1
                            break
                    else:
                        dt['value'] = 'remember값이 5미만입니다.'
                        dt['status'] = 'Weak'
                        result += 1
                        break
elif cmd2 != [] and code == 2:
    for x in cmd2:
        if "password" in x:
            if "required" in x:
                if "remember" in x:
                    re = x.find('remember')
                    numbers = re.findall(r'\d+', x[re:])
                    intnumbers = list(map(int, numbers))
                    intnumber = intnumbers.pop()
                    if intnumber >= 5:
                        if x.startswith('#'):
                            result = 200
                            break
                        else:
                            result += 2
                            dt['value'] = (x)
                            dt['status'] = 'Good'
                            result += 1
                            break
                    else:
                        dt['value'] = 'remember값이 5미만입니다.'
                        dt['status'] = 'Weak'
                        result += 1
                        break
elif cmd3 != [] and code == 3:
    for x in cmd3:
        if "password" in x:
            if "sufficient" in x:
                if "remember" in x:
                    y = x.find('remember')
                    numbers = re.findall(r'\d+', x[y:])
                    intnumbers = list(map(int, numbers))
                    intnumber = intnumbers.pop()
                    if intnumber >= 5:
                        if x.startswith('#'):
                            result = 200
                            break
                        else:
                            dt['value'] = (x)
                            dt['status'] = 'Good'
                            result += 1
                            break
                    else:
                        dt['value'] = 'remember값이 5미만입니다.'
                        dt['status'] = 'Weak'
                        result += 1
                        break

else:
    if code == 1:
        dt['value'] = '/etc/pam.d에 common-password 파일이 존재하지 않습니다.'
        dt['status'] = 'Weak'
    elif code == 2:
        dt['value'] = '/etc/pam.d에 system-password 파일이 존재하지 않습니다.'
        dt['status'] = 'Weak'
    elif code == 3:
        dt['value'] = '/etc/pam.d에 system-auth 파일이 존재하지 않습니다.'
        dt['status'] = 'Weak'


if result == 0:
    dt['value'] = 'remember 설정이 존재하지 않습니다.'
    dt['status'] = 'Weak'

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)


# su1-19
dt = {}
result = 0
dt['SUV'] = 'SU1-19'

cmd = os.popen("cat /etc/shadow").read().splitlines()
if cmd == []:
    dt['value'] = '/etc에 shadow 파일이 존재하지 않습니다.'
    dt['status'] = 'Error'
    result = 100
for x in cmd:
    y = "".join(x).split(':')
    numbers = re.findall(r'\d+', y[1])
    intnumbers = list(map(int, numbers))
    try:
        intnumber = intnumbers.pop(0)
        if intnumber >= 5:
            if x.startswith('#'):
                result = 200
                break
            else:
                dt['value'] = '모든 패스워드 알고리즘이 안전합니다.'
                dt['status'] = 'Good'
        else:
            dt['value'] = ('{}에서 패스워드 취약점이 발견되었습니다.').format(x)
            dt['status'] = 'Weak'
            break
    except:
        dt['value'] = ('{}에서 패스워드 취약점이 발견되었습니다.').format(x)
        dt['status'] = 'Weak'
        break

if result == 200:
    dt['value'] = '주석처리가 되어있습니다.'
    dt['status'] = 'Weak'
result_list.append(dt)

print(result_list)
